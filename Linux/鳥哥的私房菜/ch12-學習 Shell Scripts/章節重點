12.1 什麼是 Shell scripts
    最簡單的功能就是將許多指令彙整寫在一起， 讓使用者很輕易的就能夠 one touch 的方法去處理複雜的動作 (執行一個檔案 "shell script" ，就能夠一次執行多個指令)。

    12.1.1 幹嘛學習 shell scripts
        自動化管理的重要依據
            查詢登錄檔、追蹤流量、監控使用者使用主機狀態、主機各項硬體設備狀態、 主機軟體更新查詢

        追蹤與管理系統的重要工作
            CentOS 6.x 以前的版本中，系統的服務 (services) 啟動的介面是在 /etc/init.d/ 這個目錄下，目錄下的所有檔案都是 scripts
            時至今日，雖然 /etc/init.d/* 這個腳本啟動的方式 (systemV) 已經被新一代的 systemd 所取代 (從 CentOS 7 開始)

        簡單入侵偵測功能
            我們可以通過 shell script 去分析『當該封包嘗試幾次還是連線失敗之後，就予以抵擋住該 IP』之類的舉動

        連續指令單一化
            script 最簡單的功能就是：『彙整一些在 command line 下達的連續指令，將他寫入 scripts 當中，而由直接執行 scripts 來啟動一連串的 command line 指令輸入！

        簡易的資料處理
            直接處理數據資料的比對啊， 文字資料的處理啊等等的，撰寫方便，速度又快(因為在 Linux 效能較佳)！

        跨平台支援與學習歷程較短
            幾乎所有的 Unix Like 上面都可以跑 shell script ，連 MS Windows 系列也有相關的 script 模擬器可以用， 此外， shell script 的語法是相當親和的，看都看的懂得文字 (雖然是英文)，而不是機器碼， 很容易學習～這些都是你可以加以考量的學習點啊！

    12.1.2 第一支 script 的撰寫與執行
        指令的執行是從上而下、從左而右的分析與執行；
        指令的下達就如同第四章內提到的： 指令、選項與參數間的多個空白都會被忽略掉；
        空白行也將被忽略掉，並且 [tab] 按鍵所推開的空白同樣視為空白鍵；
        如果讀取到一個 Enter 符號 (CR) ，就嘗試開始執行該行 (或該串) 命令；
        至於如果一行的內容太多，則可以使用『 \[Enter] 』來延伸至下一行；
        『 # 』可做為註解！任何加在 # 後面的資料將全部被視為註解文字而被忽略！

        現在我們假設你寫的這個程式檔名是 /home/dmtsai/shell.sh 好了，那如何執行這個檔案？很簡單，可以有底下幾個方法：

            直接指令下達： shell.sh 檔案必須要具備可讀與可執行 (rx) 的權限，然後：
            絕對路徑：使用 /home/dmtsai/shell.sh 來下達指令；
            相對路徑：假設工作目錄在 /home/dmtsai/ ，則使用 ./shell.sh 來執行
            變數『PATH』功能：將 shell.sh 放在 PATH 指定的目錄內，例如： ~/bin/
            以 bash 程式來執行：透過『 bash shell.sh 』或『 sh shell.sh 』來執行

    12.1.3 撰寫 shell script 的良好習慣建立
        在每個 script 的檔頭處記錄好：
            script 的功能；
            script 的版本資訊；
            script 的作者與聯絡方式；
            script 的版權宣告方式；
            script 的 History (歷史紀錄)；
            script 內較特殊的指令，使用『絕對路徑』的方式來下達；
            script 運作時需要的環境變數預先宣告與設定。
            
12.2 簡單的 shell script 練習
    12.2.1 簡單範例

        可以讓使用者輸入：1. first name 與 2. last name， 最後並且在螢幕上顯示：『Your full name is: 』的內容：
            [dmtsai@study bin]$ vim showname.sh
            #!/bin/bash
            # Program:
            #	User inputs his first name and last name.  Program shows his full name.
            # History:
            # 2015/07/16	VBird	First release
            PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
            export PATH
            read -p "Please input your first name: " firstname      # 提示使用者輸入
            read -p "Please input your last name:  " lastname       # 提示使用者輸入
            echo -e "\nYour full name is: ${firstname} ${lastname}"

        那今天的日期是 2015/07/16 ， 我想要以前天、昨天、今天的日期來建立這些檔案
            [dmtsai@study bin]$ vim create_3_filename.sh
            #!/bin/bash
            # Program:
            #	Program creates three files, which named by user's input and date command.
            # History:
            # 2015/07/16	VBird	First release
            PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
            export PATH

            # 1. 讓使用者輸入檔案名稱，並取得 fileuser 這個變數；
            echo -e "I will use 'touch' command to create 3 files." # 純粹顯示資訊
            read -p "Please input your filename: " fileuser         # 提示使用者輸入

            # 2. 為了避免使用者隨意按 Enter ，利用變數功能分析檔名是否有設定？
            filename=${fileuser:-"filename"}           # 開始判斷有否設定檔名

            # 3. 開始利用 date 指令來取得所需要的檔名了；
            date1=$(date --date='2 days ago' +%Y%m%d)  # 前兩天的日期
            date2=$(date --date='1 days ago' +%Y%m%d)  # 前一天的日期
            date3=$(date +%Y%m%d)                      # 今天的日期
            file1=${filename}${date1}                  # 底下三行在設定檔名
            file2=${filename}${date2}
            file3=${filename}${date3}

            # 4. 將檔名建立吧！
            touch "${file1}"                           # 底下三行在建立檔案
            touch "${file2}"
            touch "${file3}"

        如果我們要使用者輸入兩個變數， 然後將兩個變數的內容相乘，最後輸出相乘的結果，那可以怎麼做
            [dmtsai@study bin]$ vim multiplying.sh
            #!/bin/bash
            # Program:
            #	User inputs 2 integer numbers; program will cross these two numbers.
            # History:
            # 2015/07/16	VBird	First release
            PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
            export PATH
            echo -e "You SHOULD input 2 numbers, I will multiplying them! \n"
            read -p "first number:  " firstnu
            read -p "second number: " secnu
            total=$((${firstnu}*${secnu}))
            echo -e "\nThe result of ${firstnu} x ${secnu} is ==> ${total}"

        在數值的運算上，我們可以使用『 declare -i total=${firstnu}*${secnu} 』 也可以使用上面的方式來進行！
        基本上，鳥哥比較建議使用這樣的方式來進行運算：
        var=$((運算內容))

        如果你想要計算含有小數點的資料時，其實可以透過 bc 這個指令的協助喔！ 例如可以這樣做：
            [dmtsai@study bin]$ echo "123.123*55.9" | bc
            6882.575

        數值運算：透過 bc 計算 pi
            [dmtsai@study bin]$ vim cal_pi.sh
            #!/bin/bash
            # Program:
            #	User input a scale number to calculate pi number.
            # History:
            # 2015/07/16	VBird	First release
            PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
            export PATH
            echo -e "This program will calculate pi value. \n"
            echo -e "You should input a float number to calculate pi value.\n"
            read -p "The scale number (10~10000) ? " checking
            num=${checking:-"10"}           # 開始判斷有否有輸入數值
            echo -e "Starting calculate pi value.  Be patient."
            time echo "scale=${num}; 4*a(1)" | bc -lq

    12.2.2 script 的執行方式差異 (source, sh script, ./script)